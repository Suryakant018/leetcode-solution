class Solution {
    public List<List<Integer>> kSmallestPairs(int[] nums1, int[] nums2, int k) {
        // similar to merge k sorted lists where each list is generated by a pair of (i, j);
        // where the matrix of elemement comes as product of two array
        List<List<Integer>> result = new LinkedList<>();
        int n1 = nums1.length, n2 = nums2.length;

        //each element is pair of index
        var q = new PriorityQueue<int[]>((a, b)->nums1[a[0]] + nums2[a[1]] - nums1[b[0]]-nums2[b[1]]);
        for(int i=0; i<n1; i++){
            q.offer(new int[]{i,0});
        }

        // keep selecting and mainting the min pair
        while(!q.isEmpty() && result.size()<k){
            int[] pair = q.poll();

            result.add(List.of(nums1[pair[0]], nums2[pair[1]]));
            pair[1] +=1;
            if(pair[1] < n2){
                q.offer(pair);
            }
        }
        return result;
    }
}      
